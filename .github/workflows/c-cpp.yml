name: C/C++ CI

on: [push]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        #, macos-latest, windows-latest]
        include:
          # - os: windows-latest
          #   triplet: x64-windows
          - os: ubuntu-latest
            triplet: x64-linux
          # - os: macos-latest
          #   triplet: x64-osx

    env:
      VCPKG_DEFAULT_BINARY_CACHE: ${{ github.workspace }}/vcpkg/bincache
      VCPKG_BINARY_SOURCES: 'clear;x-gha,readwrite'
    
    steps:
      - name: Set environment variable
        run: echo "CURRENT_OS=$(echo $RUNNER_OS | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
        shell: bash
      
      - name: Set up cache
        uses: actions/github-script@v7
        with:
          script: |
            core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

      - uses: actions/checkout@v4
      - name: "Create directory '${{ env.VCPKG_DEFAULT_BINARY_CACHE }}'"
        run: mkdir -p $VCPKG_DEFAULT_BINARY_CACHE
        shell: bash

      - uses: lukka/get-cmake@latest

      - name: Set up vcpkg
        uses: lukka/run-vcpkg@v4
        with:
          setupOnly: true
          vcpkgGitCommitId: 0affe8710a4a5b26328e909fe1ad7146df39d108
      
      # Restore vpkg cache
      - name: Restore vcpkg
        uses: actions/cache@v4
        with:
          path: |
            ${{ env._VCPKG_ }}
            !${{ env._VCPKG_ }}/buildtrees
            !${{ env._VCPKG_ }}/packages
            !${{ env._VCPKG_ }}/downloads
            !${{ env._VCPKG_ }}/installed
          key: |
            ${{ hashFiles( '.git/modules/vcpkg/HEAD' )}}
        
      # Ensure that the developer command promt is present on Windows runners
      - uses: ilammy/msvc-dev-cmd@v1

      - name: Install packages
        if: runner.os == 'Linux'
        run: sudo apt-get install -y libxi-dev libxtst-dev bison gperf libgles2-mesa-dev libxrandr-dev libxcursor-dev libxdamage-dev libxinerama-dev nasm

      - name: Restore from cache the dependencies and generate project files
        run: |
          cmake -DBUILD_EXAMPLE_APP=ON -DBUILD_TESTS=ON --preset ${{ env.CURRENT_OS }}-release

      - name: Build (Release configuration)
        run: |
          cmake --build --preset ${{ env.CURRENT_OS }}-release

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: |
            bin/build/${{ env.CURRENT_OS }}-release/example
            bin/build/${{ env.CURRENT_OS }}-release/test/Iris.Tests
            bin/build/${{ env.CURRENT_OS }}-release/test/AddressSanitizer.Tests
            bin/build/${{ env.CURRENT_OS }}-release/CTestTestfile.cmake
       
  test:
    needs: build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        #, macos-latest, windows-latest]
        include:
          # - os: windows-latest
          #   triplet: x64-windows
          - os: ubuntu-latest
            triplet: x64-linux
          # - os: macos-latest
          #   triplet: x64-osx

    steps:
      - name: Set environment variable
        run: echo "CURRENT_OS=${RUNNER_OS@L}" >> $GITHUB_ENV

      - uses: actions/checkout@v4
      
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
          path: bin/build/${{ env.CURRENT_OS }}-release
          
      - name: Set permissions
        if: runner.os == 'Linux'
        run: |
          chmod +x bin/build/linux-release/test/Iris.Tests/iris_tests \
          chmod +x bin/build/linux-release/test/AddressSanitizer.Tests/AddressSanitizer.Tests
      
      - name: Test
        run: |
          ctest --preset test-${{ env.CURRENT_OS }}
    