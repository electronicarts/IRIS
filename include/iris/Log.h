//Copyright (C) 2023 Electronic Arts, Inc.  All rights reserved.

#pragma once
#include "utils/BaseLog.h"
#include <memory>

#ifdef IRIS_SHARED
#ifdef IRIS_EXPORT
#define IRIS_API __declspec(dllexport)
#else
#define IRIS_API __declspec(dllimport)
#endif
#else
#define IRIS_API
#endif

namespace iris
{
	class Log : public EA::EACC::Utils::BaseLog
	{
	public:

		/// <summary>
		/// Initilizes application loggers
		/// </summary>
		/// <param name="console">Enable/Disable logging to console</param>
		/// <param name="file">Enable/Disable logging to file</param>
		/// <param name="coreLevel">level to filter log messages in Core Logger</param>
		/// <param name="dataFile">file in which to store persisted data</param>
		static void Init(bool console, bool file, int coreLevel = 0, const char* dataFile = nullptr);

		/// <summary>
		/// Removes current file sink from logger (if it exists) and adds a new one to persist the 
		/// frame data generated by the video analysis of a video
		/// </summary>
		/// <param name="fileName">file name and path to log.csv file</param>
		static void SetDataLoggerFile(const char* fileName);

		inline static std::shared_ptr<spdlog::logger>& GetDataLogger() { return m_DataLogger; }

	private:
		IRIS_API static std::shared_ptr<spdlog::logger> m_DataLogger;
	};
}

//Data Logger macro - only used for data persistence
#define LOG_DATA_INFO(...)			iris::Log::GetDataLogger()->info(__VA_ARGS__)
#define FLUSH_DATA_LOGGER()			iris::Log::GetDataLogger()->flush()